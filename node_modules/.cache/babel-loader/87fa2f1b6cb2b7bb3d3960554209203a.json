{"ast":null,"code":"import _objectSpread from\"C:/Users/Gustavo/Desktop/repositorios/react-tetris-curso/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"C:/Users/Gustavo/Desktop/repositorios/react-tetris-curso/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useState,useCallback}from\"react\";import{TETROMINOS,randomTetromino}from\"../Tetrominos.js\";import{STAGE_WIDTH,checkCollision}from\"../GameHelpers\";var prevNext=undefined;export var proxNext=randomTetromino();export var usePlayer=function usePlayer(){var _useState=useState({pos:{x:0,y:0},tetromino:TETROMINOS[0].shape,cillided:false}),_useState2=_slicedToArray(_useState,2),player=_useState2[0],setPlayer=_useState2[1];var rotate=function rotate(matrix,dir){var rotateTetro=matrix.map(function(_,index){return matrix.map(function(col){return col[index];});});if(dir>0)return rotateTetro.map(function(row){return row.reverse();});return rotateTetro.reverse();};var playerRotate=function playerRotate(stage,dir){var clonedPlayer=JSON.parse(JSON.stringify(player));clonedPlayer.tetromino=rotate(clonedPlayer.tetromino,dir);var pos=clonedPlayer.pos.x;var offset=1;while(checkCollision(clonedPlayer,stage,{x:0,y:0})){clonedPlayer.pos.x+=offset;offset=-(offset+(offset>0?1:-1));if(offset>clonedPlayer.tetromino[0].length){rotate(clonedPlayer.tetromino,-dir);clonedPlayer.pos.x=pos;return;}}setPlayer(clonedPlayer);};var updatePlayerPos=function updatePlayerPos(_ref){var x=_ref.x,y=_ref.y,collided=_ref.collided;setPlayer(function(prev){return _objectSpread(_objectSpread({},prev),{},{pos:{x:prev.pos.x+=x,y:prev.pos.y+=y},collided:collided});});};var next=function next(){prevNext=proxNext;proxNext=randomTetromino();console.log(proxNext);return prevNext.shape;};var resetPlayer=useCallback(function(){setPlayer({pos:{x:STAGE_WIDTH/2-2,y:0},tetromino:next(),collided:false});},[]);return[player,updatePlayerPos,resetPlayer,playerRotate];};","map":{"version":3,"sources":["C:/Users/Gustavo/Desktop/repositorios/react-tetris-curso/src/hooks/UsePlayer.js"],"names":["useState","useCallback","TETROMINOS","randomTetromino","STAGE_WIDTH","checkCollision","prevNext","undefined","proxNext","usePlayer","pos","x","y","tetromino","shape","cillided","player","setPlayer","rotate","matrix","dir","rotateTetro","map","_","index","col","row","reverse","playerRotate","stage","clonedPlayer","JSON","parse","stringify","offset","length","updatePlayerPos","collided","prev","next","console","log","resetPlayer"],"mappings":"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","sourcesContent":["import { useState, useCallback } from \"react\";\r\n\r\nimport { TETROMINOS, randomTetromino } from \"../Tetrominos.js\";\r\n\r\nimport { STAGE_WIDTH, checkCollision } from \"../GameHelpers\";\r\n\r\nlet prevNext = undefined;\r\nexport let proxNext = randomTetromino();\r\n\r\nexport const usePlayer = () => {\r\n  const [player, setPlayer] = useState({\r\n    pos: { x: 0, y: 0 },\r\n    tetromino: TETROMINOS[0].shape,\r\n    cillided: false,\r\n  });\r\n\r\n  const rotate = (matrix, dir) => {\r\n    const rotateTetro = matrix.map((_, index) =>\r\n      matrix.map((col) => col[index])\r\n    );\r\n\r\n    if (dir > 0) return rotateTetro.map((row) => row.reverse());\r\n    return rotateTetro.reverse();\r\n  };\r\n\r\n  const playerRotate = (stage, dir) => {\r\n    const clonedPlayer = JSON.parse(JSON.stringify(player));\r\n    clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir);\r\n\r\n    const pos = clonedPlayer.pos.x;\r\n    let offset = 1;\r\n    while (checkCollision(clonedPlayer, stage, { x: 0, y: 0 })) {\r\n      clonedPlayer.pos.x += offset;\r\n      offset = -(offset + (offset > 0 ? 1 : -1));\r\n      if (offset > clonedPlayer.tetromino[0].length) {\r\n        rotate(clonedPlayer.tetromino, -dir);\r\n        clonedPlayer.pos.x = pos;\r\n        return;\r\n      }\r\n    }\r\n\r\n    setPlayer(clonedPlayer);\r\n  };\r\n\r\n  const updatePlayerPos = ({ x, y, collided }) => {\r\n    setPlayer((prev) => ({\r\n      ...prev,\r\n      pos: { x: (prev.pos.x += x), y: (prev.pos.y += y) },\r\n      collided,\r\n    }));\r\n  };\r\n\r\n  const next = () => {\r\n    prevNext = proxNext;\r\n    proxNext = randomTetromino();\r\n    console.log(proxNext);\r\n    return prevNext.shape;\r\n  };\r\n\r\n  const resetPlayer = useCallback(() => {\r\n    setPlayer({\r\n      pos: { x: STAGE_WIDTH / 2 - 2, y: 0 },\r\n      tetromino: next(),\r\n      collided: false,\r\n    });\r\n  }, []);\r\n\r\n  return [player, updatePlayerPos, resetPlayer, playerRotate];\r\n};\r\n"]},"metadata":{},"sourceType":"module"}