{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useCallback } from \"react\";\nimport { TETROMINOS, randomTetromino } from \"../Tetrominos.js\";\nimport { STAGE_WIDTH, checkCollision } from \"../GameHelpers\";\nlet prevNext = undefined;\nexport let proxNext = randomTetromino();\nexport const usePlayer = () => {\n  _s();\n\n  const [player, setPlayer] = useState({\n    pos: {\n      x: 0,\n      y: 0\n    },\n    tetromino: TETROMINOS[0].shape,\n    cillided: false\n  });\n\n  const rotate = (matrix, dir) => {\n    const rotateTetro = matrix.map((_, index) => matrix.map(col => col[index]));\n    if (dir > 0) return rotateTetro.map(row => row.reverse());\n    return rotateTetro.reverse();\n  };\n\n  const playerRotate = (stage, dir) => {\n    const clonedPlayer = JSON.parse(JSON.stringify(player));\n    clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir);\n    const pos = clonedPlayer.pos.x;\n    let offset = 1;\n\n    while (checkCollision(clonedPlayer, stage, {\n      x: 0,\n      y: 0\n    })) {\n      clonedPlayer.pos.x += offset;\n      offset = -(offset + (offset > 0 ? 1 : -1));\n\n      if (offset > clonedPlayer.tetromino[0].length) {\n        rotate(clonedPlayer.tetromino, -dir);\n        clonedPlayer.pos.x = pos;\n        return;\n      }\n    }\n\n    setPlayer(clonedPlayer);\n  };\n\n  const updatePlayerPos = ({\n    x,\n    y,\n    collided\n  }) => {\n    setPlayer(prev => ({ ...prev,\n      pos: {\n        x: prev.pos.x += x,\n        y: prev.pos.y += y\n      },\n      collided\n    }));\n  };\n\n  const next = () => {\n    prevNext = proxNext;\n    proxNext = randomTetromino();\n    console.log(proxNext);\n    return prevNext.shape;\n  };\n\n  const resetPlayer = useCallback(() => {\n    setPlayer({\n      pos: {\n        x: STAGE_WIDTH / 2 - 2,\n        y: 0\n      },\n      tetromino: next(),\n      collided: false\n    });\n  }, []);\n  return [player, updatePlayerPos, resetPlayer, playerRotate];\n};\n\n_s(usePlayer, \"fL1/mrXWJc7Swro+yzFPGm1WGj8=\");","map":{"version":3,"sources":["C:/Users/Gustavo/Desktop/repositorios/react-tetris-curso/src/hooks/UsePlayer.js"],"names":["useState","useCallback","TETROMINOS","randomTetromino","STAGE_WIDTH","checkCollision","prevNext","undefined","proxNext","usePlayer","player","setPlayer","pos","x","y","tetromino","shape","cillided","rotate","matrix","dir","rotateTetro","map","_","index","col","row","reverse","playerRotate","stage","clonedPlayer","JSON","parse","stringify","offset","length","updatePlayerPos","collided","prev","next","console","log","resetPlayer"],"mappings":"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","sourcesContent":["import { useState, useCallback } from \"react\";\r\n\r\nimport { TETROMINOS, randomTetromino } from \"../Tetrominos.js\";\r\n\r\nimport { STAGE_WIDTH, checkCollision } from \"../GameHelpers\";\r\n\r\nlet prevNext = undefined;\r\nexport let proxNext = randomTetromino();\r\n\r\nexport const usePlayer = () => {\r\n  const [player, setPlayer] = useState({\r\n    pos: { x: 0, y: 0 },\r\n    tetromino: TETROMINOS[0].shape,\r\n    cillided: false,\r\n  });\r\n\r\n  const rotate = (matrix, dir) => {\r\n    const rotateTetro = matrix.map((_, index) =>\r\n      matrix.map((col) => col[index])\r\n    );\r\n\r\n    if (dir > 0) return rotateTetro.map((row) => row.reverse());\r\n    return rotateTetro.reverse();\r\n  };\r\n\r\n  const playerRotate = (stage, dir) => {\r\n    const clonedPlayer = JSON.parse(JSON.stringify(player));\r\n    clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir);\r\n\r\n    const pos = clonedPlayer.pos.x;\r\n    let offset = 1;\r\n    while (checkCollision(clonedPlayer, stage, { x: 0, y: 0 })) {\r\n      clonedPlayer.pos.x += offset;\r\n      offset = -(offset + (offset > 0 ? 1 : -1));\r\n      if (offset > clonedPlayer.tetromino[0].length) {\r\n        rotate(clonedPlayer.tetromino, -dir);\r\n        clonedPlayer.pos.x = pos;\r\n        return;\r\n      }\r\n    }\r\n\r\n    setPlayer(clonedPlayer);\r\n  };\r\n\r\n  const updatePlayerPos = ({ x, y, collided }) => {\r\n    setPlayer((prev) => ({\r\n      ...prev,\r\n      pos: { x: (prev.pos.x += x), y: (prev.pos.y += y) },\r\n      collided,\r\n    }));\r\n  };\r\n\r\n  const next = () => {\r\n    prevNext = proxNext;\r\n    proxNext = randomTetromino();\r\n    console.log(proxNext);\r\n    return prevNext.shape;\r\n  };\r\n\r\n  const resetPlayer = useCallback(() => {\r\n    setPlayer({\r\n      pos: { x: STAGE_WIDTH / 2 - 2, y: 0 },\r\n      tetromino: next(),\r\n      collided: false,\r\n    });\r\n  }, []);\r\n\r\n  return [player, updatePlayerPos, resetPlayer, playerRotate];\r\n};\r\n"]},"metadata":{},"sourceType":"module"}