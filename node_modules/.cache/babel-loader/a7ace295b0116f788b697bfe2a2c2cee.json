{"ast":null,"code":"import _slicedToArray from\"C:/Users/Gustavo/Desktop/repositorios/react-tetris-curso/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useState,useEffect}from\"react\";import{createStage}from\"../GameHelpers\";export var useStage=function useStage(player,resetPlayer){var _useState=useState(createStage()),_useState2=_slicedToArray(_useState,2),stage=_useState2[0],setStage=_useState2[1];var _useState3=useState(0),_useState4=_slicedToArray(_useState3,2),rowsCleared=_useState4[0],setRowsCleared=_useState4[1];useEffect(function(){setRowsCleared(0);var sweepRows=function sweepRows(newStage){return newStage.reduce(function(ack,row){if(row.findIndex(function(cell){return cell[0]===0;})===-1){setRowsCleared(function(prev){return prev+1;});ack.unshift(new Array(newStage[0].length).fill([0,\"clear\"]));return ack;}ack.push(row);return ack;},[]);};var updateStage=function updateStage(prevStage){var newStage=prevStage.map(function(row){return row.map(function(cell){return cell[1]===\"clear\"?[0,\"clear\"]:cell;});});player.tetromino.forEach(function(row,y){row.forEach(function(value,x){if(value!==0){newStage[y+player.pos.y][x+player.pos.x]=[value,\"\".concat(player.collided?\"merged\":\"clear\")];}});});if(player.collided){resetPlayer();return sweepRows(newStage);}return newStage;};setStage(function(prev){return updateStage(prev);});},[player,resetPlayer]);return[stage,setStage,rowsCleared];};","map":{"version":3,"sources":["C:/Users/Gustavo/Desktop/repositorios/react-tetris-curso/src/hooks/UseStage.js"],"names":["useState","useEffect","createStage","useStage","player","resetPlayer","stage","setStage","rowsCleared","setRowsCleared","sweepRows","newStage","reduce","ack","row","findIndex","cell","prev","unshift","Array","length","fill","push","updateStage","prevStage","map","tetromino","forEach","y","value","x","pos","collided"],"mappings":"+KAAA,OAASA,QAAT,CAAmBC,SAAnB,KAAoC,OAApC,CACA,OAASC,WAAT,KAA4B,gBAA5B,CAEA,MAAO,IAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACC,MAAD,CAASC,WAAT,CAAyB,CAC/C,cAA0BL,QAAQ,CAACE,WAAW,EAAZ,CAAlC,wCAAOI,KAAP,eAAcC,QAAd,eACA,eAAsCP,QAAQ,CAAC,CAAD,CAA9C,yCAAOQ,WAAP,eAAoBC,cAApB,eAEAR,SAAS,CAAC,UAAM,CACdQ,cAAc,CAAC,CAAD,CAAd,CAEA,GAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CAACC,QAAD,QAChBA,CAAAA,QAAQ,CAACC,MAAT,CAAgB,SAACC,GAAD,CAAMC,GAAN,CAAc,CAC5B,GAAIA,GAAG,CAACC,SAAJ,CAAc,SAACC,IAAD,QAAUA,CAAAA,IAAI,CAAC,CAAD,CAAJ,GAAY,CAAtB,EAAd,IAA2C,CAAC,CAAhD,CAAmD,CACjDP,cAAc,CAAC,SAACQ,IAAD,QAAUA,CAAAA,IAAI,CAAG,CAAjB,EAAD,CAAd,CACAJ,GAAG,CAACK,OAAJ,CAAY,GAAIC,CAAAA,KAAJ,CAAUR,QAAQ,CAAC,CAAD,CAAR,CAAYS,MAAtB,EAA8BC,IAA9B,CAAmC,CAAC,CAAD,CAAI,OAAJ,CAAnC,CAAZ,EACA,MAAOR,CAAAA,GAAP,CACD,CACDA,GAAG,CAACS,IAAJ,CAASR,GAAT,EACA,MAAOD,CAAAA,GAAP,CACD,CARD,CAQG,EARH,CADgB,EAAlB,CAWA,GAAMU,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,SAAD,CAAe,CACjC,GAAMb,CAAAA,QAAQ,CAAGa,SAAS,CAACC,GAAV,CAAc,SAACX,GAAD,QAC7BA,CAAAA,GAAG,CAACW,GAAJ,CAAQ,SAACT,IAAD,QAAWA,CAAAA,IAAI,CAAC,CAAD,CAAJ,GAAY,OAAZ,CAAsB,CAAC,CAAD,CAAI,OAAJ,CAAtB,CAAqCA,IAAhD,EAAR,CAD6B,EAAd,CAAjB,CAGAZ,MAAM,CAACsB,SAAP,CAAiBC,OAAjB,CAAyB,SAACb,GAAD,CAAMc,CAAN,CAAY,CACnCd,GAAG,CAACa,OAAJ,CAAY,SAACE,KAAD,CAAQC,CAAR,CAAc,CACxB,GAAID,KAAK,GAAK,CAAd,CAAiB,CACflB,QAAQ,CAACiB,CAAC,CAAGxB,MAAM,CAAC2B,GAAP,CAAWH,CAAhB,CAAR,CAA2BE,CAAC,CAAG1B,MAAM,CAAC2B,GAAP,CAAWD,CAA1C,EAA+C,CAC7CD,KAD6C,WAE1CzB,MAAM,CAAC4B,QAAP,CAAkB,QAAlB,CAA6B,OAFa,EAA/C,CAID,CACF,CAPD,EAQD,CATD,EAUA,GAAI5B,MAAM,CAAC4B,QAAX,CAAqB,CACnB3B,WAAW,GACX,MAAOK,CAAAA,SAAS,CAACC,QAAD,CAAhB,CACD,CAED,MAAOA,CAAAA,QAAP,CACD,CApBD,CAsBAJ,QAAQ,CAAC,SAACU,IAAD,QAAUM,CAAAA,WAAW,CAACN,IAAD,CAArB,EAAD,CAAR,CACD,CArCQ,CAqCN,CAACb,MAAD,CAASC,WAAT,CArCM,CAAT,CAuCA,MAAO,CAACC,KAAD,CAAQC,QAAR,CAAkBC,WAAlB,CAAP,CACD,CA5CM","sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { createStage } from \"../GameHelpers\";\r\n\r\nexport const useStage = (player, resetPlayer) => {\r\n  const [stage, setStage] = useState(createStage());\r\n  const [rowsCleared, setRowsCleared] = useState(0);\r\n\r\n  useEffect(() => {\r\n    setRowsCleared(0);\r\n\r\n    const sweepRows = (newStage) =>\r\n      newStage.reduce((ack, row) => {\r\n        if (row.findIndex((cell) => cell[0] === 0) === -1) {\r\n          setRowsCleared((prev) => prev + 1);\r\n          ack.unshift(new Array(newStage[0].length).fill([0, \"clear\"]));\r\n          return ack;\r\n        }\r\n        ack.push(row);\r\n        return ack;\r\n      }, []);\r\n\r\n    const updateStage = (prevStage) => {\r\n      const newStage = prevStage.map((row) =>\r\n        row.map((cell) => (cell[1] === \"clear\" ? [0, \"clear\"] : cell))\r\n      );\r\n      player.tetromino.forEach((row, y) => {\r\n        row.forEach((value, x) => {\r\n          if (value !== 0) {\r\n            newStage[y + player.pos.y][x + player.pos.x] = [\r\n              value,\r\n              `${player.collided ? \"merged\" : \"clear\"}`,\r\n            ];\r\n          }\r\n        });\r\n      });\r\n      if (player.collided) {\r\n        resetPlayer();\r\n        return sweepRows(newStage);\r\n      }\r\n\r\n      return newStage;\r\n    };\r\n\r\n    setStage((prev) => updateStage(prev));\r\n  }, [player, resetPlayer]);\r\n\r\n  return [stage, setStage, rowsCleared];\r\n};\r\n"]},"metadata":{},"sourceType":"module"}