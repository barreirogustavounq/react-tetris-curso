{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Gustavo\\\\Desktop\\\\repositorios\\\\react-tetris-curso\\\\src\\\\components\\\\Tetris.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport \"./styles/figureImages.css\";\nimport { createStage, checkCollision } from \"../GameHelpers\"; //componentes\n\nimport Stage from \"./Stage\";\nimport Display from \"./Display\";\nimport StartButton from \"./StartButton\";\nimport PauseButton from \"./PauseButton\"; //custom hooks\n\nimport { useInterval } from \"../hooks/useInterval\";\nimport { usePlayer } from \"../hooks/UsePlayer\";\nimport { proxNext } from \"../hooks/UsePlayer\";\nimport { useStage } from \"../hooks/UseStage\";\nimport { useGameStatus } from \"../hooks/UseGameStatus\"; //Styled componentes\n\nimport { StyledTetrisWrapper, StyledTetris } from \"./styles/StyledTetris\"; //Figuras\n\nimport I from \"../img/I.png\";\nimport J from \"../img/J.png\";\nimport L from \"../img/L.png\";\nimport O from \"../img/O.png\";\nimport S from \"../img/S.png\";\nimport T from \"../img/T.png\";\nimport Z from \"../img/Z.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Tetris = () => {\n  _s();\n\n  const [dropTime, setDropTime] = useState(null);\n  const [gameOver, setGameOver] = useState(false);\n  const [pause, setPause] = useState(false);\n  const [started, setStarted] = useState(false);\n  const [player, updatePlayerPos, resetPlayer, playerRotate] = usePlayer();\n  const [stage, setStage, rowsCleared] = useStage(player, resetPlayer);\n  const [score, setScore, rows, setRows, level, setLevel] = useGameStatus(rowsCleared);\n\n  const movePlayer = dir => {\n    if (!checkCollision(player, stage, {\n      x: dir,\n      y: 0\n    })) {\n      updatePlayerPos({\n        x: dir,\n        y: 0\n      });\n    }\n  };\n\n  const keyUp = ({\n    keyCode\n  }) => {\n    if (!gameOver) {\n      if (!pause) {\n        if (keyCode === 40) {\n          setDropTime(1000);\n        }\n      }\n    }\n  };\n\n  const getImage = tetromino => {\n    switch (tetromino) {\n      case \"I\":\n        return I;\n\n      case \"J\":\n        return J;\n\n      case \"L\":\n        return L;\n\n      case \"O\":\n        return O;\n\n      case \"S\":\n        return S;\n\n      case \"T\":\n        return T;\n\n      case \"X\":\n        return Z;\n\n      default:\n        break;\n    }\n  };\n\n  const startGame = () => {\n    setStage(createStage());\n    setDropTime(1000);\n    resetPlayer();\n    setScore(0);\n    setRows(0);\n    setLevel(0);\n    setGameOver(false);\n    setStarted(true);\n    setPause(false);\n  };\n\n  const pauseGame = () => {\n    if (!gameOver) {\n      if (!pause) {\n        setDropTime(null);\n        setPause(true);\n      } else {\n        setDropTime(1000);\n        setPause(false);\n      }\n    }\n  };\n\n  const drop = () => {\n    if (rows > (level + 1) * 10) {\n      setLevel(prev => prev + 1);\n      setDropTime(1000 / (level + 1) + 200);\n    }\n\n    if (!checkCollision(player, stage, {\n      x: 0,\n      y: 1\n    })) {\n      updatePlayerPos({\n        x: 0,\n        y: 1,\n        collided: false\n      });\n    } else {\n      if (player.pos.y < 1) {\n        console.log(\"GAME OVER\");\n        setGameOver(true);\n        setDropTime(null);\n        setStarted(false);\n      }\n\n      updatePlayerPos({\n        x: 0,\n        y: 0,\n        collided: true\n      });\n    }\n  };\n\n  const dropPlayer = () => {\n    setDropTime(null);\n    drop();\n  };\n\n  useInterval(() => {\n    drop();\n  }, dropTime);\n\n  const move = ({\n    keyCode\n  }) => {\n    if (!gameOver) {\n      if (!pause) {\n        if (keyCode === 37) {\n          movePlayer(-1);\n        } else if (keyCode === 39) {\n          movePlayer(1);\n        } else if (keyCode === 40) {\n          dropPlayer();\n        } else if (keyCode === 38) {\n          playerRotate(stage, 1);\n        }\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(StyledTetrisWrapper, {\n    role: \"button\",\n    tabIndex: \"0\",\n    onKeyDown: e => {\n      e.preventDefault();\n      move(e);\n    },\n    onKeyUp: keyUp,\n    children: /*#__PURE__*/_jsxDEV(StyledTetris, {\n      children: [/*#__PURE__*/_jsxDEV(Stage, {\n        stage: stage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"aside\", {\n        children: [gameOver ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(Display, {\n            gameOver: gameOver,\n            text: \"Game Over\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Display, {\n            text: `Score: ${score}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(Display, {\n            text: `Score: ${score}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Display, {\n            text: `Rows: ${rows}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Display, {\n            text: `Level: ${level}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(StartButton, {\n          callback: startGame\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(PauseButton, {\n          gameOver: gameOver,\n          pause: pause,\n          started: started,\n          callback: pauseGame\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"preview\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"next\",\n            children: \" Next:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"figure\",\n            src: getImage(proxNext.name),\n            alt: \"avatar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 156,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Tetris, \"NSgenQBCQvoKP9QKzUY8lLTuaaI=\", false, function () {\n  return [usePlayer, useStage, useGameStatus, useInterval];\n});\n\n_c = Tetris;\nexport default Tetris;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tetris\");","map":{"version":3,"sources":["C:/Users/Gustavo/Desktop/repositorios/react-tetris-curso/src/components/Tetris.js"],"names":["React","useState","createStage","checkCollision","Stage","Display","StartButton","PauseButton","useInterval","usePlayer","proxNext","useStage","useGameStatus","StyledTetrisWrapper","StyledTetris","I","J","L","O","S","T","Z","Tetris","dropTime","setDropTime","gameOver","setGameOver","pause","setPause","started","setStarted","player","updatePlayerPos","resetPlayer","playerRotate","stage","setStage","rowsCleared","score","setScore","rows","setRows","level","setLevel","movePlayer","dir","x","y","keyUp","keyCode","getImage","tetromino","startGame","pauseGame","drop","prev","collided","pos","console","log","dropPlayer","move","e","preventDefault","name"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,OAAO,2BAAP;AAEA,SAASC,WAAT,EAAsBC,cAAtB,QAA4C,gBAA5C,C,CACA;;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,WAAP,MAAwB,eAAxB,C,CAEA;;AACA,SAASC,WAAT,QAA4B,sBAA5B;AACA,SAAQC,SAAR,QAAwB,oBAAxB;AACA,SAAQC,QAAR,QAAuB,oBAAvB;AACA,SAASC,QAAT,QAAyB,mBAAzB;AACA,SAASC,aAAT,QAA8B,wBAA9B,C,CACA;;AACA,SAASC,mBAAT,EAA8BC,YAA9B,QAAkD,uBAAlD,C,CAEA;;AACA,OAAOC,CAAP,MAAc,cAAd;AACA,OAAOC,CAAP,MAAc,cAAd;AACA,OAAOC,CAAP,MAAc,cAAd;AACA,OAAOC,CAAP,MAAc,cAAd;AACA,OAAOC,CAAP,MAAc,cAAd;AACA,OAAOC,CAAP,MAAc,cAAd;AACA,OAAOC,CAAP,MAAc,cAAd;;;AAEA,MAAMC,MAAM,GAAG,MAAM;AAAA;;AACnB,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BvB,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM,CAACwB,QAAD,EAAWC,WAAX,IAA0BzB,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAAC0B,KAAD,EAAQC,QAAR,IAAoB3B,QAAQ,CAAC,KAAD,CAAlC;AACA,QAAM,CAAC4B,OAAD,EAAUC,UAAV,IAAwB7B,QAAQ,CAAC,KAAD,CAAtC;AAEA,QAAM,CAAC8B,MAAD,EAASC,eAAT,EAA0BC,WAA1B,EAAuCC,YAAvC,IAAuDzB,SAAS,EAAtE;AACA,QAAM,CAAC0B,KAAD,EAAQC,QAAR,EAAkBC,WAAlB,IAAiC1B,QAAQ,CAACoB,MAAD,EAASE,WAAT,CAA/C;AAEA,QAAM,CAACK,KAAD,EAAQC,QAAR,EAAkBC,IAAlB,EAAwBC,OAAxB,EAAiCC,KAAjC,EAAwCC,QAAxC,IAAoD/B,aAAa,CACrEyB,WADqE,CAAvE;;AAIA,QAAMO,UAAU,GAAIC,GAAD,IAAS;AAC1B,QAAI,CAAC1C,cAAc,CAAC4B,MAAD,EAASI,KAAT,EAAgB;AAAEW,MAAAA,CAAC,EAAED,GAAL;AAAUE,MAAAA,CAAC,EAAE;AAAb,KAAhB,CAAnB,EAAsD;AACpDf,MAAAA,eAAe,CAAC;AAAEc,QAAAA,CAAC,EAAED,GAAL;AAAUE,QAAAA,CAAC,EAAE;AAAb,OAAD,CAAf;AACD;AACF,GAJD;;AAKA,QAAMC,KAAK,GAAG,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAiB;AAC7B,QAAI,CAACxB,QAAL,EAAe;AACb,UAAI,CAACE,KAAL,EAAY;AACV,YAAIsB,OAAO,KAAK,EAAhB,EAAoB;AAClBzB,UAAAA,WAAW,CAAC,IAAD,CAAX;AACD;AACF;AACF;AACF,GARD;;AAUA,QAAM0B,QAAQ,GAAIC,SAAD,IAAc;AAC7B,YAAQA,SAAR;AACE,WAAK,GAAL;AACE,eAAOpC,CAAP;;AAEF,WAAK,GAAL;AACE,eAAOC,CAAP;;AAEF,WAAK,GAAL;AACE,eAAOC,CAAP;;AAEF,WAAK,GAAL;AACE,eAAOC,CAAP;;AAEF,WAAK,GAAL;AACE,eAAOC,CAAP;;AAEF,WAAK,GAAL;AACE,eAAOC,CAAP;;AAEF,WAAK,GAAL;AACE,eAAOC,CAAP;;AAEF;AACE;AAvBJ;AAyBD,GA1BD;;AA4BA,QAAM+B,SAAS,GAAG,MAAM;AACtBhB,IAAAA,QAAQ,CAAClC,WAAW,EAAZ,CAAR;AACAsB,IAAAA,WAAW,CAAC,IAAD,CAAX;AACAS,IAAAA,WAAW;AACXM,IAAAA,QAAQ,CAAC,CAAD,CAAR;AACAE,IAAAA,OAAO,CAAC,CAAD,CAAP;AACAE,IAAAA,QAAQ,CAAC,CAAD,CAAR;AACAjB,IAAAA,WAAW,CAAC,KAAD,CAAX;AACAI,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAF,IAAAA,QAAQ,CAAC,KAAD,CAAR;AACD,GAVD;;AAYA,QAAMyB,SAAS,GAAG,MAAM;AACtB,QAAI,CAAC5B,QAAL,EAAe;AACb,UAAI,CAACE,KAAL,EAAY;AACVH,QAAAA,WAAW,CAAC,IAAD,CAAX;AACAI,QAAAA,QAAQ,CAAC,IAAD,CAAR;AACD,OAHD,MAGO;AACLJ,QAAAA,WAAW,CAAC,IAAD,CAAX;AACAI,QAAAA,QAAQ,CAAC,KAAD,CAAR;AACD;AACF;AACF,GAVD;;AAYA,QAAM0B,IAAI,GAAG,MAAM;AACjB,QAAId,IAAI,GAAG,CAACE,KAAK,GAAG,CAAT,IAAc,EAAzB,EAA6B;AAC3BC,MAAAA,QAAQ,CAAEY,IAAD,IAAUA,IAAI,GAAG,CAAlB,CAAR;AAEA/B,MAAAA,WAAW,CAAC,QAAQkB,KAAK,GAAG,CAAhB,IAAqB,GAAtB,CAAX;AACD;;AAED,QAAI,CAACvC,cAAc,CAAC4B,MAAD,EAASI,KAAT,EAAgB;AAAEW,MAAAA,CAAC,EAAE,CAAL;AAAQC,MAAAA,CAAC,EAAE;AAAX,KAAhB,CAAnB,EAAoD;AAClDf,MAAAA,eAAe,CAAC;AAAEc,QAAAA,CAAC,EAAE,CAAL;AAAQC,QAAAA,CAAC,EAAE,CAAX;AAAcS,QAAAA,QAAQ,EAAE;AAAxB,OAAD,CAAf;AACD,KAFD,MAEO;AACL,UAAIzB,MAAM,CAAC0B,GAAP,CAAWV,CAAX,GAAe,CAAnB,EAAsB;AACpBW,QAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACAjC,QAAAA,WAAW,CAAC,IAAD,CAAX;AACAF,QAAAA,WAAW,CAAC,IAAD,CAAX;AACAM,QAAAA,UAAU,CAAC,KAAD,CAAV;AACD;;AACDE,MAAAA,eAAe,CAAC;AAAEc,QAAAA,CAAC,EAAE,CAAL;AAAQC,QAAAA,CAAC,EAAE,CAAX;AAAcS,QAAAA,QAAQ,EAAE;AAAxB,OAAD,CAAf;AACD;AACF,GAlBD;;AAoBA,QAAMI,UAAU,GAAG,MAAM;AACvBpC,IAAAA,WAAW,CAAC,IAAD,CAAX;AACA8B,IAAAA,IAAI;AACL,GAHD;;AAKA9C,EAAAA,WAAW,CAAC,MAAM;AAChB8C,IAAAA,IAAI;AACL,GAFU,EAER/B,QAFQ,CAAX;;AAIA,QAAMsC,IAAI,GAAG,CAAC;AAAEZ,IAAAA;AAAF,GAAD,KAAiB;AAC5B,QAAI,CAACxB,QAAL,EAAe;AACb,UAAI,CAACE,KAAL,EAAY;AACV,YAAIsB,OAAO,KAAK,EAAhB,EAAoB;AAClBL,UAAAA,UAAU,CAAC,CAAC,CAAF,CAAV;AACD,SAFD,MAEO,IAAIK,OAAO,KAAK,EAAhB,EAAoB;AACzBL,UAAAA,UAAU,CAAC,CAAD,CAAV;AACD,SAFM,MAEA,IAAIK,OAAO,KAAK,EAAhB,EAAoB;AACzBW,UAAAA,UAAU;AACX,SAFM,MAEA,IAAIX,OAAO,KAAK,EAAhB,EAAoB;AACzBf,UAAAA,YAAY,CAACC,KAAD,EAAQ,CAAR,CAAZ;AACD;AACF;AACF;AACF,GAdD;;AAgBA,sBACE,QAAC,mBAAD;AACE,IAAA,IAAI,EAAC,QADP;AAEE,IAAA,QAAQ,EAAC,GAFX;AAGE,IAAA,SAAS,EAAG2B,CAAD,IAAO;AAChBA,MAAAA,CAAC,CAACC,cAAF;AACAF,MAAAA,IAAI,CAACC,CAAD,CAAJ;AACD,KANH;AAOE,IAAA,OAAO,EAAEd,KAPX;AAAA,2BASE,QAAC,YAAD;AAAA,8BACE,QAAC,KAAD;AAAO,QAAA,KAAK,EAAEb;AAAd;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,mBACGV,QAAQ,gBACP;AAAA,kCACE,QAAC,OAAD;AAAS,YAAA,QAAQ,EAAEA,QAAnB;AAA6B,YAAA,IAAI,EAAC;AAAlC;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,QAAC,OAAD;AAAS,YAAA,IAAI,EAAG,UAASa,KAAM;AAA/B;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADO,gBAMP;AAAA,kCACE,QAAC,OAAD;AAAS,YAAA,IAAI,EAAG,UAASA,KAAM;AAA/B;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,QAAC,OAAD;AAAS,YAAA,IAAI,EAAG,SAAQE,IAAK;AAA7B;AAAA;AAAA;AAAA;AAAA,kBAFF,eAGE,QAAC,OAAD;AAAS,YAAA,IAAI,EAAG,UAASE,KAAM;AAA/B;AAAA;AAAA;AAAA;AAAA,kBAHF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAPJ,eAaE,QAAC,WAAD;AAAa,UAAA,QAAQ,EAAEU;AAAvB;AAAA;AAAA;AAAA;AAAA,gBAbF,eAcE,QAAC,WAAD;AACE,UAAA,QAAQ,EAAE3B,QADZ;AAEE,UAAA,KAAK,EAAEE,KAFT;AAGE,UAAA,OAAO,EAAEE,OAHX;AAIE,UAAA,QAAQ,EAAEwB;AAJZ;AAAA;AAAA;AAAA;AAAA,gBAdF,eAoBE;AAAK,UAAA,SAAS,EAAC,SAAf;AAAA,kCACE;AAAG,YAAA,SAAS,EAAC,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AACE,YAAA,SAAS,EAAC,QADZ;AAEE,YAAA,GAAG,EAAEH,QAAQ,CAACxC,QAAQ,CAACsD,IAAV,CAFf;AAGE,YAAA,GAAG,EAAC;AAHN;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBApBF;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AATF;AAAA;AAAA;AAAA;AAAA,UADF;AA4CD,CAzKD;;GAAM1C,M;UAMyDb,S,EACtBE,Q,EAEmBC,a,EAgG1DJ,W;;;KAzGIc,M;AA2KN,eAAeA,MAAf","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nimport \"./styles/figureImages.css\";\r\n\r\nimport { createStage, checkCollision } from \"../GameHelpers\";\r\n//componentes\r\nimport Stage from \"./Stage\";\r\nimport Display from \"./Display\";\r\nimport StartButton from \"./StartButton\";\r\nimport PauseButton from \"./PauseButton\";\r\n\r\n//custom hooks\r\nimport { useInterval } from \"../hooks/useInterval\";\r\nimport {usePlayer} from \"../hooks/UsePlayer\";\r\nimport {proxNext} from \"../hooks/UsePlayer\";\r\nimport { useStage } from \"../hooks/UseStage\";\r\nimport { useGameStatus } from \"../hooks/UseGameStatus\";\r\n//Styled componentes\r\nimport { StyledTetrisWrapper, StyledTetris } from \"./styles/StyledTetris\";\r\n\r\n//Figuras\r\nimport I from \"../img/I.png\"\r\nimport J from \"../img/J.png\"\r\nimport L from \"../img/L.png\"\r\nimport O from \"../img/O.png\"\r\nimport S from \"../img/S.png\"\r\nimport T from \"../img/T.png\"\r\nimport Z from \"../img/Z.png\"\r\n\r\nconst Tetris = () => {\r\n  const [dropTime, setDropTime] = useState(null);\r\n  const [gameOver, setGameOver] = useState(false);\r\n  const [pause, setPause] = useState(false);\r\n  const [started, setStarted] = useState(false);\r\n\r\n  const [player, updatePlayerPos, resetPlayer, playerRotate] = usePlayer();\r\n  const [stage, setStage, rowsCleared] = useStage(player, resetPlayer);\r\n\r\n  const [score, setScore, rows, setRows, level, setLevel] = useGameStatus(\r\n    rowsCleared\r\n  );\r\n\r\n  const movePlayer = (dir) => {\r\n    if (!checkCollision(player, stage, { x: dir, y: 0 })) {\r\n      updatePlayerPos({ x: dir, y: 0 });\r\n    }\r\n  };\r\n  const keyUp = ({ keyCode }) => {\r\n    if (!gameOver) {\r\n      if (!pause) {\r\n        if (keyCode === 40) {\r\n          setDropTime(1000);\r\n        }\r\n      }\r\n    }\r\n  };\r\n  \r\n  const getImage = (tetromino) =>{\r\n    switch (tetromino) {\r\n      case \"I\":\r\n        return I\r\n     \r\n      case \"J\":\r\n        return J\r\n     \r\n      case \"L\":\r\n        return L\r\n     \r\n      case \"O\":\r\n        return O\r\n     \r\n      case \"S\":\r\n        return S\r\n     \r\n      case \"T\":\r\n        return T\r\n     \r\n      case \"X\":\r\n        return Z\r\n     \r\n      default:\r\n        break;\r\n    }\r\n  } \r\n\r\n  const startGame = () => {\r\n    setStage(createStage());\r\n    setDropTime(1000);\r\n    resetPlayer();\r\n    setScore(0);\r\n    setRows(0);\r\n    setLevel(0);\r\n    setGameOver(false);\r\n    setStarted(true);\r\n    setPause(false);\r\n  };\r\n\r\n  const pauseGame = () => {\r\n    if (!gameOver) {\r\n      if (!pause) {\r\n        setDropTime(null);\r\n        setPause(true);\r\n      } else {\r\n        setDropTime(1000);\r\n        setPause(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  const drop = () => {\r\n    if (rows > (level + 1) * 10) {\r\n      setLevel((prev) => prev + 1);\r\n\r\n      setDropTime(1000 / (level + 1) + 200);\r\n    }\r\n\r\n    if (!checkCollision(player, stage, { x: 0, y: 1 })) {\r\n      updatePlayerPos({ x: 0, y: 1, collided: false });\r\n    } else {\r\n      if (player.pos.y < 1) {\r\n        console.log(\"GAME OVER\");\r\n        setGameOver(true);\r\n        setDropTime(null);\r\n        setStarted(false);\r\n      }\r\n      updatePlayerPos({ x: 0, y: 0, collided: true });\r\n    }\r\n  };\r\n\r\n  const dropPlayer = () => {\r\n    setDropTime(null);\r\n    drop();\r\n  };\r\n\r\n  useInterval(() => {\r\n    drop();\r\n  }, dropTime);\r\n\r\n  const move = ({ keyCode }) => {\r\n    if (!gameOver) {\r\n      if (!pause) {\r\n        if (keyCode === 37) {\r\n          movePlayer(-1);\r\n        } else if (keyCode === 39) {\r\n          movePlayer(1);\r\n        } else if (keyCode === 40) {\r\n          dropPlayer();\r\n        } else if (keyCode === 38) {\r\n          playerRotate(stage, 1);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <StyledTetrisWrapper\r\n      role=\"button\"\r\n      tabIndex=\"0\"\r\n      onKeyDown={(e) => {\r\n        e.preventDefault();\r\n        move(e);\r\n      }}\r\n      onKeyUp={keyUp}\r\n    >\r\n      <StyledTetris>\r\n        <Stage stage={stage} />\r\n        <aside>\r\n          {gameOver ? (\r\n            <div>\r\n              <Display gameOver={gameOver} text=\"Game Over\" />\r\n              <Display text={`Score: ${score}`} />\r\n            </div>\r\n          ) : (\r\n            <div>\r\n              <Display text={`Score: ${score}`} />\r\n              <Display text={`Rows: ${rows}`} />\r\n              <Display text={`Level: ${level}`} />\r\n            </div>\r\n          )}\r\n          <StartButton callback={startGame} />\r\n          <PauseButton\r\n            gameOver={gameOver}\r\n            pause={pause}\r\n            started={started}\r\n            callback={pauseGame}\r\n          />\r\n          <div className=\"preview\">\r\n            <p className=\"next\"> Next:</p>\r\n            <img\r\n              className=\"figure\"\r\n              src={getImage(proxNext.name)}\r\n              alt=\"avatar\"\r\n            />\r\n          </div>\r\n        </aside>\r\n      </StyledTetris>\r\n    </StyledTetrisWrapper>\r\n  );\r\n};\r\n\r\nexport default Tetris;\r\n"]},"metadata":{},"sourceType":"module"}